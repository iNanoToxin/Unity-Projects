#pragma kernel compute

struct BoidData {
    float2 position;
    float2 velocity;

    float2 flockHeading;
    float2 flockCenter;
    float2 seperationHeading;
    int numFlockmates;
};

RWStructuredBuffer<BoidData> boidsBuffer;

float squarePerceptionRadius;
float squareAvoidanceRadius;
int numBoids;

[numthreads(1024, 1, 1)]
void compute(uint3 id : SV_DispatchThreadID) {
    for (int i = 0; i < numBoids; i++) {
        if (id.x == i) continue;

        const BoidData boid = boidsBuffer[i];
        const float2 offset = boidsBuffer[id.x].position - boid.position;
        const float squareDistance = offset.x * offset.x + offset.y * offset.y;

        if (squareDistance < squarePerceptionRadius) {
            boidsBuffer[id.x].numFlockmates += 1;
            boidsBuffer[id.x].flockCenter += boid.position;
            boidsBuffer[id.x].flockHeading += boid.velocity;

            if (squareDistance < squareAvoidanceRadius) {
                boidsBuffer[id.x].seperationHeading += offset / squareDistance;
            }
        }
    }
}